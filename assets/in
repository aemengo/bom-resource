#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/git-resource-request.XXXXXX)

cat > $payload <&0
cat $payload > /tmp/payload

load_pubkey $payload
configure_https_tunnel $payload
configure_git_ssl_verification $payload
configure_credentials $payload

uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
git_config_payload=$(jq -r '.source.git_config // []' < $payload)
bom_root_directory=$(jq -r '(.source.bom_root_directory // ".")' < $payload)
feature_config_payload=$(jq -r '.source.features // ""' < $payload)
if [ ! -z "$feature_config_payload" ]; then
  validateKeys=$(echo ${feature_config_payload} | jq -r '(.validate_keys // false)')
  featuresDirectory=$(echo ${feature_config_payload} | jq -r '(.directory // "features")')
  expected_keys_file=$(echo ${feature_config_payload} | jq -r '(.expected_keys_file // "expectedKeys.yml")')
  searchPath=$(echo ${feature_config_payload} | jq -r '(.search_path // "[]")')
else
  validateKeys=false
  featuresDirectory="features"
  expected_keys_file="expectedKeys.yml"
  searchPath="[]"
fi
product=$(jq -r '(.params.product // "")' < $payload)

configure_git_global "${git_config_payload}"

if [ -z "$uri" ]; then
  echo "invalid payload (missing uri):" >&2
  cat $payload >&2
  exit 1
fi

shopt -s dotglob
rm -fr ${destination}/*
shopt -u dotglob

branchflag=""
if [ -n "$branch" ]; then
  branchflag="--branch $branch"
fi

if [ -z "$product" ]; then
  tmpdest=${destination}
else
  tmpdest=$(mktemp -d)
fi

git clone --single-branch $uri $branchflag $tmpdest

cd $tmpdest

git fetch origin refs/notes/*:refs/notes/*
git checkout -q HEAD

git log -1 --oneline
git clean --force --force -d

resource_version_ref=$(git rev-parse HEAD)

if [ -z "$product" ]; then
  echo "WARNING: No product specified. No product clone will occur."
else
  product_repo=$(grep -r "^git-repo: " ${bom_root_directory}/bom/${product}.yml | awk '{print $(NF)}')
  product_commit=$(grep -r "^commit: " ${bom_root_directory}/bom/${product}.yml | awk '{print $(NF)}')

  echo "Checking out commit ${product_commit} of ${product_repo}"

  git clone ${product_repo} ${destination}

  cd $destination
  git checkout -q ${product_commit}

  cp $tmpdest/${bom_root_directory}/bom/${product}.yml .git/bom
  echo "Copying features file"
  inputFile=$(mktemp)
  echo $searchPath | jq -c -r '.[]' | while read i; do
      echo "Searching for ${PWD}/${featuresDirectory}/${i}"
      echo "${tmpInput} --input-file ${PWD}/${featuresDirectory}/${i}" >> $inputFile
  done
  productFeatures=$(cat ${inputFile})
  echo "Inputs from search path ${productFeatures}"
  validate=""
  if [[ $validateKeys == true ]]; then
      validate="--validate-keys --expected-keys-file ${featuresDirectory}/${expected_keys_file}"
  fi
  feature-file compile ${productFeatures} \
     --input-file $tmpdest/${bom_root_directory}/features/global-vars.yml \
     --input-file $tmpdest/${bom_root_directory}/features/${product}-vars.yml \
     --output-file .git/features \
     ${validate} --expected-keys-file ${featuresDirectory}/${expected_keys_file}

  echo "*******"
  cat .git/features
  echo "*******"
fi

# Store committer email in .git/committer. Can be used to send email to last committer on failed build
# Using https://github.com/mdomke/concourse-email-resource for example
git --no-pager log -1 --pretty=format:"%ae" > .git/committer

jq -n "{
  version: {ref: $(echo $resource_version_ref | jq -R .)},
  metadata: $(git_metadata)
}" >&3
