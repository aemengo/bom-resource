#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

destination=$1
tmpdest=$(mktemp -d)

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/git-resource-request.XXXXXX)

cat > $payload <&0
cat $payload > /tmp/payload

load_pubkey $payload
load_git_crypt_key $payload
configure_https_tunnel $payload
configure_git_ssl_verification $payload
configure_credentials $payload

uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
git_config_payload=$(jq -r '.source.git_config // []' < $payload)
product=$(jq -r '(.params.product // "")' < $payload)
features=$(jq -r '(.params.fetch_features // false)' < $payload)

configure_git_global "${git_config_payload}"

if [ -z "$uri" ]; then
  echo "invalid payload (missing uri):" >&2
  cat $payload >&2
  exit 1
fi

shopt -s dotglob
rm -fr ${destination}/*
shopt -u dotglob

if [ -z "$product" ]; then
  echo "WARNING: No product specified. No clone will occur." > ${destination}/WARNING
  cat ${destination}/WARNING >&2
  exit 0
fi

branchflag=""
if [ -n "$branch" ]; then
  branchflag="--branch $branch"
fi

git clone --single-branch $uri $branchflag $tmpdest

cd $tmpdest

git fetch origin refs/notes/*:refs/notes/*
git checkout -q HEAD

git log -1 --oneline
git clean --force --force -d

resource_version_ref=$(git rev-parse HEAD)

if [ -f $GIT_CRYPT_KEY_PATH ]; then
  echo "unlocking git repo"
  git crypt unlock $GIT_CRYPT_KEY_PATH
fi

product_repo=$(grep -r "^git-repo: " bom/${product}.yml | awk '{print $(NF)}')
product_commit=$(grep -r "^commit: " bom/${product}.yml | awk '{print $(NF)}')

echo "Checking out commit ${product_commit} of ${product_repo}"

git clone ${product_repo} ${destination}

cd $destination
git checkout -q ${product_commit}

# Store committer email in .git/committer. Can be used to send email to last committer on failed build
# Using https://github.com/mdomke/concourse-email-resource for example
git --no-pager log -1 --pretty=format:"%ae" > .git/committer

cp $tmpdest/bom/${product}.yml .git/bom

if [[ $features == true ]]; then
  echo "Copying features file"

  if [[ -r $tmpdest/features/${product}-vars.yml ]]; then
    cp $tmpdest/features/${product}-vars.yml .git/features
  else
    echo "Features file does not exist" >&2
  fi
else
  echo "Not copying features file"
fi

jq -n "{
  version: {ref: $(echo $resource_version_ref | jq -R .)},
  metadata: $(git_metadata)
}" >&3
